{
	// Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    // Tips:
    // escape dollar sign by double dollar sign

    "bash for": {
        "prefix": ["for"],
        "body": [
            "for (( i=start; i<=end; i++ ))",
            "do ",
            "   echo \"iteration: ${i}\"",
            "done"
        ]
    },

    "snippet: if else": {
        "prefix": "if",
        "body": [
            "# note: must have empty space between xx: [ xx ]",
			"# -z tests if condition true, -n no tests if condition if false",
            "if [[ -${1|z,n|} \\${${2:var}} ]]; then",
            "\t${3:echo \"do something\"}",
            "else",
            "\techo \"else\"",
            "fi",
            ""
        ],
        "description": "if else "
    },

    "snippet: python debugger": {
        "prefix": ["debug", "debugger", "snippet", "python", "py"],
        "body": [
            "echo \"[Action Needed] need to launch the debugger client\"",
            "python -m debugpy \\",
            "\t--listen localhost:${1:5678} \\",
            "\t--wait-for-client \\",
            "\t${2:python_file_and_arguments}"
        ]
    },

    "run python cprofile from bash": {
        "prefix": ["cprofile", "python", "profile", "perform", "snippet"],
        "body": [
            "profile_output=${1:profile_output}",
            "python -m cProfile -o $${profile_output} ${2:python_command_and_args}",
        ]
    },

    "snippet: check condition": {
        "prefix": ["["],
        "body": [
            "[ -n ${target} ]"
        ],
        "description": "eval expression is True"
    },

    "snippet: rsync": {
        "prefix": ["rsync"],
        "body": [
            "rsync -zarvm ${1:source_path} ${2:dest_path}"
        ],
        "description": "rsync, skip empty folder, incremental sync updates"
    },

    "snippet: convert images to video": {
        "prefix": "ffmpeg",
        "body": [
            "# %3d pads int number as in 001 format",
            "# -vf: filter to pad image size in case dimensions cause errors",
            "ffmpeg -f image2 -r ${1:framerate(integer)} -i ${2:source_dir/name_%3d.jpg} -vcodec libx264 -vf \"pad=ceil(iw/2)*2:ceil(ih/2)*2\" -crf 18  -pix_fmt yuv420p ${3:output_path}.mp4",
            ""
        ],
        "description": "convert a series of numbered images to a video file"
    },

    "unzip file": {
        "prefix": "unzip",
        "body": [
            "unzip ${1:zip_file_path} -d ${2:target_dir_without_zip_filename_as_parent}"
        ],
        "description": "unzip file to directory"
    },

    "multi-line comment": {
        "prefix": ["#", "comment"],
        "body": [
            "",
            ": '",
            "${1:insert_here}",
            "'"
        ]
    },

    "remove subfolder with input name": {
        "prefix": ["rm", "remove", "delete", "find"],
        "body": [
            "find . -name buffer -type d -exec rm -r {} \\;"
        ],
        "description": "remove all sub-folders from the current working folder that match the input name"
    },
    "latex build": {
        "prefix": ["latex", "pdflatex", "tex"],
        "body": [
            "pdflatex -shell-escape -synctex=1 -interaction=nonstopmode ${1:filename.tex}"
        ]
    },
    "distrobox run commands": {
        "prefix": ["distrobox", "run", "enter"],
        "body": [
            "distrobox-enter --name ${1:ubuntu2310_base} -- ${2:/usr/local/texlive/2024/bin/x86_64-linux/pdflatex} -shell-escape -synctex=1 -interaction=nonstopmode ${3:filename}.tex"
        ]
    },

    "python debug switcher": {
        "prefix": "debug",
        "body": [
            "#!/bin/bash",
            "",
            "echo \"[Action Needed] need to launch the debugger client\"",
            "",
            "debug=nonempty # comment out to use normal mode",
            "file_and_arguments=\"novel_downloader/cat_txt_files.py \\",
            "\t--path ${HOME}/bookname \\",
            "\t-udn",
            "\"",
            "port=5678",
            "debug_config=\"-m debugpy --listen localhost:${port} --wait-for-client\"",
            "",
            "if [[ -n ${debug} ]]; then",
            "\techo \"=========[DEBUG MODE]=========\"",
            "\tpython ${debug_config} ${file_and_arguments}",
            "else",
            "\techo \"=========[NORMAL MODE]=========\"",
            "\tpython ${file_and_arguments}",
            "fi"
        ],
        "description": "switch between python debugger and runner"
    },

    "run in new named screen without attach": {
        "prefix": ["screen", "scr"],
        "body": [
            "screen -dmS ${1:ScreenName} conda run -n ${2:CondaEnv} --no-capture-output ${3:Command}"
        ]
    },
}